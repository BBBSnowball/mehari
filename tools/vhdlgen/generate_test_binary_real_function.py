import vhdlgen
v = vhdlgen

print "blub"

file = v.CompilationUnit()

file.add(v.Comment(
"""--------------------------------------------------------------------------------
 autogenerated from {{source_files}}
--------------------------------------------------------------------------------""", ""))

file.libraries().add("ieee").use("std_logic_1164.all").use("numeric_std.all").use("math_real.all")
file.libraries().add("work").use("double_type.all").use("float_helpers.all").use("test_helpers.all")

entity = v.Entity("test_{{uut_name}}")
file.add(entity)

architecture = v.Architecture("behavior", entity.name())
file.add(architecture)

component = v.Component("{{uut_name}}")
component.port().add(v.Pin("aclk",                    v.Direction.In,  v.Type("std_logic")))
component.port().add(v.Pin("{{input_a_name}}_tdata",  v.Direction.In,  v.Type("double")))
component.port().add(v.Pin("{{input_a_name}}_tvalid", v.Direction.In,  v.Type("std_logic")))
component.port().add(v.Pin("{{input_a_name}}_tready", v.Direction.Out, v.Type("std_logic")))
component.port().add(v.Pin("{{input_b_name}}_tdata",  v.Direction.In,  v.Type("double")))
component.port().add(v.Pin("{{input_b_name}}_tvalid", v.Direction.In,  v.Type("std_logic")))
component.port().add(v.Pin("{{input_b_name}}_tready", v.Direction.Out, v.Type("std_logic")))
component.port().add(v.Pin("{{result_name}}_tdata",   v.Direction.Out, v.Type("double")))
component.port().add(v.Pin("{{result_name}}_tvalid",  v.Direction.Out, v.Type("std_logic")))
component.port().add(v.Pin("{{result_name}}_tready",  v.Direction.In,  v.Type("std_logic")))

architecture.addDeclaration(v.Comment("Component Declaration for the Unit Under Test (UUT)"))
architecture.addDeclaration(component)

architecture.addDeclaration(v.Comment("Clock"))
architecture.addDeclaration(v.Signal("aclk", v.Type("std_logic"), v.Value("'0'")))
architecture.addDeclaration(v.Constant("aclk_period", v.Type("time"), v.Value("10 ns")))

architecture.addDeclaration(v.Comment("Inputs"))
architecture.addDeclaration(v.Signal("input_a_tdata",  v.Type("double"),    v.Value("(others => '0')")))
architecture.addDeclaration(v.Signal("input_a_tvalid", v.Type("std_logic"), v.Value("'0'")))
architecture.addDeclaration(v.Signal("input_b_tdata",  v.Type("double"),    v.Value("(others => '0')")))
architecture.addDeclaration(v.Signal("input_b_tvalid", v.Type("std_logic"), v.Value("'0'")))
architecture.addDeclaration(v.Signal("result_tready",  v.Type("std_logic"), v.Value("'0'")))

architecture.addDeclaration(v.Comment("Outputs"))
architecture.addDeclaration(v.Signal("input_a_tready", v.Type("std_logic")))
architecture.addDeclaration(v.Signal("input_b_tready", v.Type("std_logic")))
architecture.addDeclaration(v.Signal("result_tdata",   v.Type("double")))
architecture.addDeclaration(v.Signal("result_tvalid",  v.Type("std_logic")))

with open("test_binary_real_function.vhd.tpl2", "w") as f:
	f.write(str(file.prettyPrint()))

print "done"

def distutilsPlatformBuildDir() {
	return ["python", "-c", 'import sys, distutils.util ; print "build/lib.%s-%s" % (distutils.util.get_platform(), sys.version[0:3])'].execute().text
}

task compilePythonCTemplate(type: Exec) {
	workingDir "python-ctemplate"

	commandLine "python", "setup.py", "build", "--build-platlib="+distutilsPlatformBuildDir()

	inputs.dir "python-ctemplate/src"
	inputs.file "python-ctemplate/setup.py"
	outputs.file "python-ctemplate/" + distutilsPlatformBuildDir()  + "/ctemplate.so"
}

task installPythonCTemplate(type: Copy) {
	from "python-ctemplate/" + distutilsPlatformBuildDir()
	into pythonInstallPath

	dependsOn compilePythonCTemplate
}

task testPythonCTemplate(type: Exec) {
	workingDir "python-ctemplate"

	commandLine "python", "tests/test.py"

	environment "PYTHONPATH", file(pythonInstallPath).absolutePath

	dependsOn installPythonCTemplate
	mustRunAfter "compile"

	inputs.files installPythonCTemplate.outputs
	inputs.dir "python-ctemplate/test"
	outputs.file "python-ctemplate/python-ctemplate.tap"
}

task installPythonHelpers(type: SymLink) {
	from "python-helpers"
	into "_install"
	include "**"
	exclude "*.bak"
	exclude "*.pyc"
}

task cleanGTest (type: Delete) { delete { tasks["extractZlibSource"   ].targetDir } }

task extractGTestSource(type: FetchAndExtractSourceTask) {
	artifact "com.google.code.googletest:gtest:1.7.0:sources@tar.bz2"
	into "_gtest"

	mustRunAfter cleanGTest
}

task prepareGTest(type: Exec) {
	commandLine "cmake", "."
	workingDir extractGTestSource.targetDir

	dependsOn extractGTestSource

	inputs.files  fileTree(extractGTestSource.targetDir).include("**/CMakeLists.txt", "cmake/internal_utils.cmake")
	outputs.files fileTree(extractGTestSource.targetDir).include("cmake_install.cmake", "CMakeCache.txt", "Makefile",
		"CMakeFiles/**/*.cmake", "CMakeFiles/**/*.make", "CMakeFiles/**/Makefile*")
}

task compileGTest(type: Exec) {
	commandLine "make"
	workingDir extractGTestSource.targetDir

	dependsOn prepareGTest

	inputs.files  fileTree(extractGTestSource.targetDir).include("Makefile", "src")
	outputs.files fileTree(extractGTestSource.targetDir).include("libgtest*.a")
}

task installGTestHeaders(type: Copy) {
	from rootPath(extractGTestSource.targetDir, "include")
	from(".") {
		include "gtest_tap.h"
		rename { "gtest/tap.h" }
	}
	into rootPath("_install", "include")

	dependsOn compileGTest
}

task installGTestLibs(type: Copy) {
	from(rootPath(extractGTestSource.targetDir)) {
		include "*.a"
	}
	into rootPath("_install", "lib")

	dependsOn compileGTest
}

task installGTest {
	dependsOn installGTestHeaders, installGTestLibs
}

["compile", "install", "test"].each { name ->
	task(name) {
		dependsOn tasks.findAll { task -> task.name.startsWith(name) && task.name != name }
	}
}

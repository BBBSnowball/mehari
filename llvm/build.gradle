ext {

	BUILD_DIR = file("$projectDir/_build")
	INSTALL_DIR = file("$projectDir/_install")

	BUILD_MODE = "DEBUG"

	LLVM_PASSES = file("$projectDir/llvm-passes")
	LLVM_PASSES_INSTALL = file("$INSTALL_DIR/llvm-passes")
	LLVM_PASSES_LIB_DIR = file("$BUILD_DIR/llvm-passes")
	LLVM_PASSES_LIB = file("$LLVM_PASSES_LIB_DIR/libmeharipasses.so")
	LLVM_SOURCE = file("$projectDir/_llvm")
	LLVM_BIN = file("$INSTALL_DIR/llvm/bin")
	DEFAULT_LLVM_VERSION = "3.4"

	IPANEMA = file("$projectDir/../private/ipanema")
	IPANEMA_PYTHON_LIB_DIR = file("$projectDir/../private/python/lib")

	EXAMPLE_DIR = file("$projectDir/examples")
	CFLAGS_FOR_EXAMPLE = "-DDOUBLE_FLOAT -D__POSIX__ -D_DSC_EVENTQUEUE -D__RESET -DEXEC_SEQ"

	CODEGEN_PREPARATION_SCRIPT = file("$projectDir/../private/python/scripts/prepare_example_for_code_generation.py")

	PARTITIONED_EXAMPLE_BUILD_SCRIPT = file("$projectDir/../private/build_ipanema_and_example-mehari.sh")
	PARTITIONED_EXAMPLE_TEST_SCRIPT = file("$projectDir/../private/python/tests/partitioned_example_test.py")

	// valid function names for partitioning (compined methods must be seperated by whitespace):
	// - evalD
	// - evalND
	// - evalS
	PARTITIONING_TARGET_FUNCTIONS = "evalND evalS"

	// valid partitioning methods (sperated by '+'):
	// - random 	(random partitioning)
	// - clustering (hierarchical clustering)
	// - sa 		(simulated annealing)
	// - k-lin 		(kernighan-lin)
	PARTITIONING_METHODS = ["k-lin", "clustering", "sa"]

	// valid devices (sepearted by whitespace): 
	// - Cortex-A9 	(ARMv7 core + FPU; one core for each entry!)
	// - xc7z020-1 	(FPGA on Xilinx Zynq-7000: Z-7010)
	PARTITIONING_DEVICES = "Cortex-A9 Cortex-A9"

	TEMPLATE_DIR = file("$projectDir/examples/templates")
	MEHARI_SOURCES = file("$projectDir/examples/mehari")

	OUTPUT_DIR = file("$projectDir/_output")
	OUTPUT_GRAPH_DIR = file("$OUTPUT_DIR/graph")
	PARTITIONING_RESULTS_DIR = file("$OUTPUT_DIR/partitioning")

	PRIVATE_BUILD_DIR = file("$projectDir/../private/build")

	EXAMPLE_SIMULATION_CONFIG = file("$projectDir/../private/examples/example_sim_config.yaml")
}


task cleanLLVM(type: Delete) {
	delete LLVM_SOURCE
}

task cleanOutput(type: Delete) { 
	delete OUTPUT_DIR 
}

task clean(type: Delete) {
	dependsOn cleanLLVM, cleanOutput
	delete BUILD_DIR, INSTALL_DIR
}


task extractClangSource(type: FetchAndExtractSourceTask) {
	artifact "llvm:clang:$DEFAULT_LLVM_VERSION:sources@tar.gz"
	into path(LLVM_SOURCE, "tools", "clang")

	mustRunAfter cleanLLVM
}

task extractLLVMSource(type: FetchAndExtractSourceTask) {
	dependsOn extractClangSource

	artifact "llvm:llvm:$DEFAULT_LLVM_VERSION:sources@tar.gz"
	into LLVM_SOURCE

	mustRunAfter cleanLLVM
}


task prepareBuildLLVM(type: Exec) {
	dependsOn extractLLVMSource

	def source_dir = extractLLVMSource.targetDir
	def build_dir = file("$BUILD_DIR/llvm")
	def install_dir = file("$INSTALL_DIR/llvm")
	
	inputs.dir source_dir
	outputs.dir build_dir

	def build_targets = "X86" 	// TODO do we need more targets? ARM?

	def additional_flags = "-DLLVM_REQUIRES_RTTI=1"

	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	doFirst {
		build_dir.mkdirs()
		install_dir.mkdirs()	
	}

	workingDir build_dir
	commandLine "bash", "-c", "cmake " +
		"-j$parallel_processes " + 
		"$additional_flags " +
		"-DCMAKE_BUILD_TYPE=$BUILD_MODE " +
		"-DLLVM_TARGETS_TO_BUILD=$build_targets " +
		"-DCMAKE_INSTALL_PREFIX=$install_dir " +
		"$source_dir"
}


task buildLLVM(type: Exec) {
	dependsOn prepareBuildLLVM

	def source_dir = extractLLVMSource.targetDir
	def build_dir = file("$BUILD_DIR/llvm")
	def install_dir = file("$INSTALL_DIR/llvm")

	inputs.files fileTree(build_dir) {
		include "**/Makefile", "**/cmake_install.cmake"
	}
	outputs.dir file("$build_dir/bin")

	ext.make_additional_flags = "REQUIRES_RTTI=1" // TODO do we need this if the have a cmake flag in prepareBuildLLVM ?
	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	workingDir build_dir
	commandLine "bash", "-c", "$make_additional_flags gmake -j$parallel_processes"
}


task installLLVM(type: Exec) {
	dependsOn buildLLVM

	def build_dir = file("$BUILD_DIR/llvm")
	def install_dir = file("$INSTALL_DIR/llvm")

	inputs.dir build_dir
	outputs.dir install_dir

	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	workingDir build_dir
	commandLine "bash", "-c", "gmake -j$parallel_processes install"

}


task prepareBuildLLVMPasses(type: Exec) {
	dependsOn installLLVM
	dependsOn ":tools:install"
	
	def build_dir = file("$BUILD_DIR/llvm-passes")
	def install_dir = file("$INSTALL_DIR/llvm-passes")

	inputs.files fileTree(LLVM_PASSES) {
		include "**/*.cpp", "**/*.h", "CMakeLists.txt"
	}
	outputs.dir build_dir

	doFirst {
		build_dir.mkdirs()
	}

	workingDir build_dir
	commandLine "bash", "-c", "cmake -DCMAKE_BUILD_TYPE=$BUILD_MODE -DCMAKE_INSTALL_PREFIX=$install_dir $LLVM_PASSES"
}

task buildLLVMPasses(type: Exec) {
	dependsOn prepareBuildLLVMPasses

	def build_dir = file("$BUILD_DIR/llvm-passes")

	inputs.files fileTree(LLVM_PASSES) {
		include "**/*.cpp", "**/*.h", "**/CMakeLists.txt"
	}
	outputs.files fileTree(build_dir) {
		include "**/*.so"
	}
	
	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	workingDir build_dir
	commandLine "bash", "-c", "gmake -j$parallel_processes"
}


task installLLVMPasses(type: Exec) {
	dependsOn buildLLVMPasses

	def build_dir = file("$BUILD_DIR/llvm-passes")
	def install_dir = file("$INSTALL_DIR/llvm-passes")

	inputs.dir build_dir
	outputs.dir install_dir

	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	workingDir build_dir
	commandLine "bash", "-c", "gmake -j$parallel_processes install"
}


task compile {
	dependsOn buildLLVMPasses
}


task copyMehariSources(type: Copy) {
	doFirst {
		PARTITIONING_RESULTS_DIR.mkdirs()
	}

	from MEHARI_SOURCES
	into PARTITIONING_RESULTS_DIR
}


// create the processing task for each example
def examples = fileTree(EXAMPLE_DIR) {
	include "*.c"
}

examples.each { File example ->
	PARTITIONING_METHODS.each { String pMethod ->
		partitioningProcessing(example, pMethod)
	}
}


task testOptimizationPasses(type: Exec) {
	dependsOn buildLLVMPasses

	def build_dir = file("$BUILD_DIR/llvm-passes")
	workingDir build_dir

	commandLine "./MehariUnittests"
}


task createGraphImages() {
	def dot_files = fileTree(OUTPUT_DIR) {
		include "**/*.dot"
	}

	doLast {
		dot_files.each { File file ->
			["png", "pdf"].each { type ->
				exec {
					commandLine "dot", "-T"+type, file, "-o", "${file}.${type}"
				}
			}
		}
	}
}

task createResults() {
	dependsOn createGraphImages
}


task test() {
	dependsOn testOptimizationPasses
}

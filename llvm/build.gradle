ext {

	BUILD_DIR = file("$projectDir/_build")
	INSTALL_DIR = file("$projectDir/_install")

	BUILD_MODE = "DEBUG"

	LLVM_PASSES = file("$projectDir/llvm-passes")
	LLVM_PASSES_INSTALL = file("$INSTALL_DIR/llvm-passes")
	LLVM_PASSES_LIB_DIR = file("$LLVM_PASSES_INSTALL/lib")
	LLVM_PASSES_LIB = file("$LLVM_PASSES_LIB_DIR/libmeharipasses.so")
	LLVM_SOURCE = file("$projectDir/_llvm")
	LLVM_BIN = file("$INSTALL_DIR/llvm/bin")
	DEFAULT_LLVM_VERSION = "3.4"

	IPANEMA = file("$projectDir/../private/ipanema")
	IPANEMA_INCLUDES_SYSLAYER = file("$IPANEMA/include/syslayer/linux")
	IPANEMA_INCLUDES_SIM = file("$IPANEMA/include/sim")
	IPANEMA_PYTHON_LIB_DIR = file("$projectDir/../private/python/lib")

	EXAMPLE_FILE = file("$projectDir/examples/dc_motor.c")
	CFLAGS_FOR_EXAMPLE = "-DDOUBLE_FLOAT -D__POSIX__ -D_DSC_EVENTQUEUE -D__RESET -DEXEC_SEQ"

	EXAMPLE_NAME = EXAMPLE_FILE.name.lastIndexOf('.').with {it != -1 ? EXAMPLE_FILE.name[0..<it] : EXAMPLE_FILE.name}

	CODEGEN_PREPARATION_SCRIPT = file("$projectDir/../private/python/scripts/prepare_example_for_code_generation.py")

	PARTITIONED_EXAMPLE_BUILD_SCRIPT = file("$projectDir/../private/build_ipanema_and_example-mehari.sh")
	PARTITIONED_EXAMPLE_TEST_SCRIPT = file("$projectDir/../private/python/tests/partitioned_example_test.py")

	// valid function names for partitioning (seperated by whitespace):
	// - evalD
	// - evalND
	// - evalS
	PARTITIONING_TARGET_FUNCTIONS = "evalND evalS"

	// valid partitioning methods: 
	// - random 	(random partitioning)
	// - clustering (hierarchical clustering)
	// - sa 		(simulated annealing)
	// - k-lin 		(kernighan-lin)
	PARTITIONING_METHOD = "k-lin"

	// valid devices (sepearted by whitespace): 
	// - Cortex-A9 	(ARMv7 core + FPU; one core for each entry!)
	// - xc7z010-1 	(FPGA on Xilinx Zynq-7000: Z-7010)
	PARTITIONING_DEVICES = "Cortex-A9 Cortex-A9"

	TEMPLATE_DIR = file("$projectDir/examples/templates")
	MEHARI_SOURCES = file("$projectDir/examples/mehari")

	OUTPUT_DIR = file("$projectDir/_output")
	OUTPUT_GRAPH_DIR = file("$OUTPUT_DIR/graph")
	PARTITIONING_RESULTS_DIR = file("$OUTPUT_DIR/partitioning")

	PARTITIONING_TARGET_NAME = "$EXAMPLE_NAME"+"_partitioned_"+"$PARTITIONING_METHOD"
	PARTITIONING_TARGET_FILE = file("$PARTITIONING_RESULTS_DIR/$PARTITIONING_TARGET_NAME"+".c")

	PRIVATE_BUILD_DIR = file("$projectDir/../private/build")

	EXAMPLE_SIMULATION_CONFIG = file("$projectDir/../private/examples/example_sim_config.yaml")
}


task cleanLLVM(type: Delete) {
	delete LLVM_SOURCE
}

task cleanOutput(type: Delete) { 
	delete OUTPUT_DIR 
}

task clean(type: Delete) {
	dependsOn cleanLLVM, cleanOutput
	delete BUILD_DIR, INSTALL_DIR
}


task extractClangSource(type: FetchAndExtractSourceTask) {
	artifact "llvm:clang:$DEFAULT_LLVM_VERSION:sources@tar.gz"
	into path(LLVM_SOURCE, "tools", "clang")

	mustRunAfter cleanLLVM
}

task extractLLVMSource(type: FetchAndExtractSourceTask) {
	dependsOn extractClangSource

	artifact "llvm:llvm:$DEFAULT_LLVM_VERSION:sources@tar.gz"
	into LLVM_SOURCE

	mustRunAfter cleanLLVM
}


task prepareBuildLLVM(type: Exec) {
	dependsOn extractLLVMSource

	def source_dir = extractLLVMSource.targetDir
	def build_dir = file("$BUILD_DIR/llvm")
	def install_dir = file("$INSTALL_DIR/llvm")
	
	inputs.dir source_dir
	outputs.dir build_dir

	def build_targets = "X86" 	// TODO do we need more targets? ARM?

	def additional_flags = "-DLLVM_REQUIRES_RTTI=1"

	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	doFirst {
		build_dir.mkdirs()
		install_dir.mkdirs()	
	}

	workingDir build_dir
	commandLine "bash", "-c", "cmake " +
		"-j$parallel_processes " + 
		"$additional_flags " +
		"-DCMAKE_BUILD_TYPE=$BUILD_MODE " +
		"-DLLVM_TARGETS_TO_BUILD=$build_targets " +
		"-DCMAKE_INSTALL_PREFIX=$install_dir " +
		"$source_dir"
}


task buildLLVM(type: Exec) {
	dependsOn prepareBuildLLVM

	def source_dir = extractLLVMSource.targetDir
	def build_dir = file("$BUILD_DIR/llvm")
	def install_dir = file("$INSTALL_DIR/llvm")

	inputs.files fileTree(build_dir) {
		include "**/Makefile", "**/cmake_install.cmake"
	}
	outputs.dir file("$build_dir/bin")

	ext.make_additional_flags = "REQUIRES_RTTI=1" // TODO do we need this if the have a cmake flag in prepareBuildLLVM ?
	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	workingDir build_dir
	commandLine "bash", "-c", "$make_additional_flags gmake -j$parallel_processes"
}


task installLLVM(type: Exec) {
	dependsOn buildLLVM

	def build_dir = file("$BUILD_DIR/llvm")
	def install_dir = file("$INSTALL_DIR/llvm")

	inputs.dir build_dir
	outputs.dir install_dir

	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	workingDir build_dir
	commandLine "bash", "-c", "gmake -j$parallel_processes install"

}


task prepareBuildLLVMPasses(type: Exec) {
	dependsOn installLLVM
	dependsOn ":tools:install"
	
	def build_dir = file("$BUILD_DIR/llvm-passes")
	def install_dir = file("$INSTALL_DIR/llvm-passes")

	inputs.files fileTree(LLVM_PASSES) {
		include "**/*.cpp", "**/*.h", "CMakeLists.txt"
	}
	outputs.dir build_dir

	doFirst {
		build_dir.mkdirs()
	}

	workingDir build_dir
	commandLine "bash", "-c", "cmake -DCMAKE_BUILD_TYPE=$BUILD_MODE -DCMAKE_INSTALL_PREFIX=$install_dir $LLVM_PASSES"
}

task buildLLVMPasses(type: Exec) {
	dependsOn prepareBuildLLVMPasses

	def build_dir = file("$BUILD_DIR/llvm-passes")

	inputs.files fileTree(LLVM_PASSES) {
		include "**/*.cpp", "**/*.h", "**/CMakeLists.txt"
	}
	outputs.files fileTree(build_dir) {
		include "**/*.so"
	}
	
	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	workingDir build_dir
	commandLine "bash", "-c", "gmake -j$parallel_processes"
}


task installLLVMPasses(type: Exec) {
	dependsOn buildLLVMPasses

	def build_dir = file("$BUILD_DIR/llvm-passes")
	def install_dir = file("$INSTALL_DIR/llvm-passes")

	inputs.dir build_dir
	outputs.dir install_dir

	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	workingDir build_dir
	commandLine "bash", "-c", "gmake -j$parallel_processes install"

}


task compile {
	dependsOn installLLVMPasses
}


task prepareExample(type: Exec) {
	doFirst {
		OUTPUT_DIR.mkdirs()
	}

	def target_file = file("$OUTPUT_DIR/$EXAMPLE_NAME"+".c")

	inputs.file EXAMPLE_FILE
	outputs.file target_file

	// remove redundant function calles from example
	commandLine "bash", "-c", """sed '/^\\s*if\\s*(\\s*!\\s*(\\*status.*\$/ d' $EXAMPLE_FILE > $target_file"""
}


task createIR(type: Exec) {
	dependsOn installLLVM, prepareExample

	def tmp_source_file = file("$OUTPUT_DIR/$EXAMPLE_NAME"+".c")
	def irfile = file("$OUTPUT_DIR/$EXAMPLE_NAME"+".ll")

	inputs.file tmp_source_file
	outputs.file irfile

	commandLine "bash", "-c", "$LLVM_BIN/clang " +
	"$CFLAGS_FOR_EXAMPLE " +
	"-S -emit-llvm " +
	"-I$IPANEMA_INCLUDES_SYSLAYER -I$IPANEMA_INCLUDES_SIM " + 
	"$tmp_source_file " +
	"-o $irfile"
}


task prepareInlining(type: Exec) {
	dependsOn installLLVMPasses, createIR

	def sourcefile = file("$OUTPUT_DIR/$EXAMPLE_NAME"+".ll")
	def targetfile = file("$OUTPUT_DIR/$EXAMPLE_NAME-prepare-inline"+".ll")

	commandLine "bash", "-c", "$LLVM_BIN/opt " +
	"-load $LLVM_PASSES_LIB " + 
	"-add-attr-always-inline " +
	"-inline-functions \"evalParameterCouplings\" " +
	"-S $sourcefile > $targetfile"
}

task applyInlining(type: Exec) {
	dependsOn prepareInlining

	def sourcefile = file("$OUTPUT_DIR/$EXAMPLE_NAME-prepare-inline"+".ll")
	def targetfile = file("$OUTPUT_DIR/$EXAMPLE_NAME-inlined"+".ll")

	commandLine "bash", "-c", "$LLVM_BIN/opt -always-inline -S $sourcefile > $targetfile"
}


task speedUpAnalysis(type: Exec) {
	dependsOn installLLVMPasses, createIR, applyInlining

	doFirst {
		OUTPUT_GRAPH_DIR.mkdirs()
	}

	def targetfile = file("$OUTPUT_DIR/$EXAMPLE_NAME-inlined"+".ll")

	commandLine "bash", "-c", "$LLVM_BIN/opt " +
	"-load $LLVM_PASSES_LIB " +
	"-speedup " +
	"-dot " +
	"-speedup-functions \"$PARTITIONING_TARGET_FUNCTIONS\" " +
	"-speedup-output-dir \"$OUTPUT_GRAPH_DIR\" " +
	"-S $targetfile > /dev/null"
}


task createIRGraphs(type: Exec) {
	dependsOn installLLVMPasses, createIR, applyInlining

	doFirst {
		OUTPUT_GRAPH_DIR.mkdirs()
	}

	def targetfile = file("$OUTPUT_DIR/$EXAMPLE_NAME-inlined"+".ll")

	commandLine "bash", "-c", "$LLVM_BIN/opt " +
	"-load $LLVM_PASSES_LIB " +
	"-dfg " +
	"-graph-functions \"$PARTITIONING_TARGET_FUNCTIONS\" " +
	"-irgraph-output-dir \"$OUTPUT_GRAPH_DIR\" " +
	"-S $targetfile > /dev/null"
}


task prepareCodeGenerationResult(type: Exec) {
	dependsOn prepareExample

	doFirst {
		PARTITIONING_RESULTS_DIR.mkdirs()
	}

	def inputfile = file("$OUTPUT_DIR/$EXAMPLE_NAME"+".c")

	commandLine "python", CODEGEN_PREPARATION_SCRIPT, inputfile, PARTITIONING_TARGET_FILE, PARTITIONING_TARGET_FUNCTIONS
}


task copyMehariSources(type: Copy) {
	doFirst {
		PARTITIONING_RESULTS_DIR.mkdirs()
	}

	from MEHARI_SOURCES
	into PARTITIONING_RESULTS_DIR
}


task applyPartitioning(type: Exec) {
	dependsOn installLLVMPasses, createIR, applyInlining, prepareCodeGenerationResult, copyMehariSources

	doFirst {
		OUTPUT_GRAPH_DIR.mkdirs()
	}
	
	def targetfile = file("$OUTPUT_DIR/$EXAMPLE_NAME-inlined"+".ll")

	commandLine "bash", "-c", "$LLVM_BIN/opt " +
	"-load $LLVM_PASSES_LIB " +
	"-partitioning " +
	"-template-dir \"$TEMPLATE_DIR\" " +
	"-partitioning-method \"$PARTITIONING_METHOD\" " +
	"-partitioning-functions \"$PARTITIONING_TARGET_FUNCTIONS\" " +
	"-partitioning-devices \"$PARTITIONING_DEVICES\" " +
	"-partitioning-output-dir \"$PARTITIONING_RESULTS_DIR\" " +
	"-partitioning-graph-output-dir \"$OUTPUT_GRAPH_DIR\" " +
	"-S $targetfile > /dev/null"
}


task runOptimizationPasses {
	dependsOn speedUpAnalysis, createIRGraphs, applyPartitioning
}


task createGraphImages() {
	dependsOn runOptimizationPasses

	def dot_files = fileTree(OUTPUT_DIR) {
		include "**/*.dot"
	}

	doLast {
		dot_files.each { File file ->
			["png", "pdf"].each { type ->
				exec {
					commandLine "dot", "-T"+type, file, "-o", "${file}.${type}"
				}
			}
		}
	}
}


task createResults() {
	dependsOn createGraphImages
}


task runOptimizationPassesUnittests(type: Exec) {
	dependsOn installLLVMPasses

	environment "LD_LIBRARY_PATH", LLVM_PASSES_LIB_DIR

	workingDir file("$LLVM_PASSES_INSTALL/unittests")
	commandLine "./MehariUnittests"
}


task compilePartitionedExample(type: Exec) {
	dependsOn applyPartitioning
	commandLine PARTITIONED_EXAMPLE_BUILD_SCRIPT, PARTITIONING_TARGET_FILE
}


task testPartitionedExample(type: Exec) {
	dependsOn compilePartitionedExample, ":private:compile"

	environment "PYTHONPATH", IPANEMA_PYTHON_LIB_DIR

	workingDir PRIVATE_BUILD_DIR
	commandLine "python", 
		PARTITIONED_EXAMPLE_TEST_SCRIPT,
		rootPath(PRIVATE_BUILD_DIR, EXAMPLE_NAME),
		rootPath(PRIVATE_BUILD_DIR, PARTITIONING_TARGET_NAME),
		EXAMPLE_SIMULATION_CONFIG
}


task test() {
	dependsOn runOptimizationPasses
	dependsOn runOptimizationPassesUnittests
	dependsOn createResults
	dependsOn testPartitionedExample
}

ext {
	LLVM_PASSES = file("$projectDir/llvm-passes")
	DEFAULT_LLVM_VERSION = "3.4"

	IPANEMA = file("$projectDir/../private/ipanema")
	IPANEMA_INCLUDES_SYSLAYER = file("$IPANEMA/include/syslayer/linux")
	IPANEMA_INCLUDES_SIM = file("$IPANEMA/include/sim")

	EXAMPLE_FILE = file("$projectDir/examples/single_pendulum.c")
	CFLAGS_FOR_EXAMPLE = "-DDOUBLE_FLOAT -D__POSIX__ -D_DSC_EVENTQUEUE -D__RESET -DEXEC_SEQ"

	LLVM_SOURCE = file("$projectDir/_llvm")

	BUILD_DIR = file("$projectDir/_build")
	INSTALL_DIR = file("$projectDir/_install")

	OUTPUT_DIR = file("$projectDir/_output")
	OUTPUT_GRAPH_DIR = file("$OUTPUT_DIR/graph")
}


task cleanLLVM(type: Delete) {
	delete LLVM_SOURCE
}

task cleanOutput(type: Delete) { 
	delete OUTPUT_DIR 
}

task clean(type: Delete) {
	dependsOn cleanLLVM, cleanOutput
	delete BUILD_DIR, INSTALL_DIR
}


task extractClangSource(type: FetchAndExtractSourceTask) {
	artifact "llvm:clang:$DEFAULT_LLVM_VERSION:sources@tar.gz"
	into path(LLVM_SOURCE, "tools", "clang")

	mustRunAfter cleanLLVM
}

task extractLLVMSource(type: FetchAndExtractSourceTask) {
	dependsOn extractClangSource

	artifact "llvm:llvm:$DEFAULT_LLVM_VERSION:sources@tar.gz"
	into LLVM_SOURCE

	mustRunAfter cleanLLVM
}


task prepareBuildLLVM(type: Exec) {
	dependsOn extractLLVMSource

	def source_dir = extractLLVMSource.targetDir
	def build_dir = file("$BUILD_DIR/llvm")
	def install_dir = file("$INSTALL_DIR/llvm")
	
	inputs.dir source_dir
	outputs.dir build_dir

	def build_mode = "RELEASE" 	// TODO make this configurable
	def build_targets = "X86" 	// TODO do we need more targets? ARM?

	def additional_flags = "-DLLVM_REQUIRES_RTTI=1"

	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	doFirst {
		build_dir.mkdirs()
		install_dir.mkdirs()	
	}

	workingDir build_dir
	commandLine "bash", "-c", "cmake -j$parallel_processes $additional_flags -DCMAKE_BUILD_TYPE=$build_mode -DLLVM_TARGETS_TO_BUILD=$build_targets -DCMAKE_INSTALL_PREFIX=$install_dir $source_dir"
}


task buildLLVM(type: Exec) {
	dependsOn prepareBuildLLVM

	def source_dir = extractLLVMSource.targetDir
	def build_dir = file("$BUILD_DIR/llvm")
	def install_dir = file("$INSTALL_DIR/llvm")

	inputs.files fileTree(build_dir) {
		include "**/Makefile", "**/cmake_install.cmake"
	}
	outputs.dir file("$build_dir/bin")

	ext.make_additional_flags = "REQUIRES_RTTI=1" // TODO do we need this if the have a cmake flag in prepareBuildLLVM ?
	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	workingDir build_dir
	commandLine "bash", "-c", "$make_additional_flags gmake -j$parallel_processes"
}


task installLLVM(type: Exec) {
	dependsOn buildLLVM

	def build_dir = file("$BUILD_DIR/llvm")
	def install_dir = file("$INSTALL_DIR/llvm")

	inputs.dir build_dir
	outputs.dir install_dir

	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	workingDir build_dir
	commandLine "bash", "-c", "gmake -j$parallel_processes install"

}


task prepareBuildLLVMPasses(type: Exec) {
	dependsOn installLLVM
	
	def build_dir = file("$BUILD_DIR/llvm-passes")

	inputs.files fileTree(LLVM_PASSES) {
		include "**/*.cpp", "**/*.h", "CMakeLists.txt"
	}
	outputs.dir build_dir

	def build_mode = "RELEASE" 	// TODO make this configurable

	doFirst {
		build_dir.mkdirs()
	}

	workingDir build_dir
	commandLine "bash", "-c", "cmake -DCMAKE_BUILD_TYPE=$build_mode $LLVM_PASSES"
}

task buildLLVMPasses(type: Exec) {
	dependsOn prepareBuildLLVMPasses

	def build_dir = file("$BUILD_DIR/llvm-passes")

	inputs.files fileTree(LLVM_PASSES) {
		include "**/*.cpp", "**/*.h", "**/CMakeLists.txt"
	}
	outputs.files fileTree(build_dir) {
		include "**/*.so"
	}
	
	def parallel_processes = hasProperty("parallel_compilation_processes") ? parallel_compilation_processes : 4

	workingDir build_dir
	commandLine "bash", "-c", "make -j$parallel_processes"
}


task compile {
	dependsOn buildLLVMPasses
}


task prepareExample(type: Exec) {
	doFirst {
		OUTPUT_DIR.mkdirs()
	}

	def target_file = file("$OUTPUT_DIR/example.c")

	inputs.file EXAMPLE_FILE
	outputs.file target_file

	// remove redundant function calles from example
	commandLine "bash", "-c", """sed '/^\\s*if\\s*(\\s*!\\s*(\\*status.*\$/ d' $EXAMPLE_FILE > $target_file"""
}


task createIR(type: Exec) {
	dependsOn installLLVM, prepareExample

	// TODO better solution for this
	def tmp_source_file = file("$OUTPUT_DIR/example.c")
	def irfile = file("$OUTPUT_DIR/example.ll")

	inputs.file tmp_source_file
	outputs.file irfile

	def clang = file("$INSTALL_DIR/llvm/bin/clang")

	commandLine "bash", "-c", "$clang $CFLAGS_FOR_EXAMPLE -S -emit-llvm -I$IPANEMA_INCLUDES_SYSLAYER -I$IPANEMA_INCLUDES_SIM $tmp_source_file -o $irfile"
}


task prepareInlining(type: Exec) {
	dependsOn buildLLVMPasses, createIR

	def opt = file("$INSTALL_DIR/llvm/bin/opt")
	def analysis_lib = file("$BUILD_DIR/llvm-passes/lib/Analysis/MehariAnalysis.so")
	def transform_lib = file("$BUILD_DIR/llvm-passes/lib/Transforms/MehariTransforms.so")

	// TODO better solution for this
	def sourcefile = file("$OUTPUT_DIR/example.ll")
	def targetfile = file("$OUTPUT_DIR/example-prepare-inline.ll")

	commandLine "bash", "-c", "$opt -load $analysis_lib -load $transform_lib -add-attr-always-inline -inline-functions \"evalParameterCouplings\" -S $sourcefile > $targetfile"
}

task applyInlining(type: Exec) {
	dependsOn prepareInlining

	def opt = file("$INSTALL_DIR/llvm/bin/opt")

	// TODO better solution for this
	def sourcefile = file("$OUTPUT_DIR/example-prepare-inline.ll")
	def targetfile = file("$OUTPUT_DIR/example-inline.ll")

	commandLine "bash", "-c", "$opt -always-inline -S $sourcefile > $targetfile"
}


task speedUpAnalysis(type: Exec) {
	dependsOn buildLLVMPasses, createIR, applyInlining

	doFirst {
		OUTPUT_GRAPH_DIR.mkdirs()
	}

	def opt = file("$INSTALL_DIR/llvm/bin/opt")
	def analysis_lib = file("$BUILD_DIR/llvm-passes/lib/Analysis/MehariAnalysis.so")

	// TODO better solution for this
	def targetfile = file("$OUTPUT_DIR/example-inline.ll")

	commandLine "bash", "-c", "$opt -load $analysis_lib -speedup -dot -speedup-functions \"evalS evalND\" -S $targetfile > /dev/null"
}


task createIRGraphs(type: Exec) {
	dependsOn buildLLVMPasses, createIR, applyInlining

	doFirst {
		OUTPUT_GRAPH_DIR.mkdirs()
	}

	def opt = file("$INSTALL_DIR/llvm/bin/opt")
	def analysis_lib = file("$BUILD_DIR/llvm-passes/lib/Analysis/MehariAnalysis.so")

	// TODO better solution for this
	def targetfile = file("$OUTPUT_DIR/example-inline.ll")

	commandLine "bash", "-c", "$opt -load $analysis_lib -dfg -S $targetfile > /dev/null"
}


task createCCodeFromIR(type: Exec) {
	dependsOn buildLLVMPasses, createIR, applyInlining

	def opt = file("$INSTALL_DIR/llvm/bin/opt")
	def codegen_lib = file("$BUILD_DIR/llvm-passes/lib/CodeGen/MehariCodeGen.so")

	// TODO better solution for this
	def targetfile = file("$OUTPUT_DIR/example-inline.ll")

	commandLine "bash", "-c", "$opt -load $codegen_lib -ccode -S $targetfile > /dev/null"
}


task applyPartitioning(type: Exec) {
	dependsOn buildLLVMPasses, createIR, applyInlining

	doFirst {
		OUTPUT_GRAPH_DIR.mkdirs()
	}

	def opt = file("$INSTALL_DIR/llvm/bin/opt")
	def analysis_lib = file("$BUILD_DIR/llvm-passes/lib/Analysis/MehariAnalysis.so")
	def transform_lib = file("$BUILD_DIR/llvm-passes/lib/Transforms/MehariTransforms.so")

	// TODO better solution for this
	def targetfile = file("$OUTPUT_DIR/example-inline.ll")

	commandLine "bash", "-c", "$opt -load $analysis_lib -load $transform_lib -partitioning -partitioning-functions \"evalS\" -S $targetfile > /dev/null"
}


task runOptimizationPasses {
	dependsOn speedUpAnalysis, createIRGraphs, applyPartitioning //, createCCodeFromIR 
}


task createGraphImages() {
	dependsOn runOptimizationPasses

	def dot_files = fileTree(OUTPUT_DIR) {
		include "**/*.dot"
	}

	doLast {
		dot_files.each { File file ->
			["png", "pdf"].each { type ->
				exec {
					commandLine "dot", "-T"+type, file, "-o", "${file}.${type}"
				}
			}
		}
	}
}


task createResults() {
	dependsOn createGraphImages
}


task test() {
	dependsOn runOptimizationPasses
	dependsOn createResults
}

-- generated by Mehari
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.math_real.ALL;
use ieee.numeric_std.all;

library work;
use work.float_helpers.all;
use work.test_helpers.all;

entity test is
   port ( 
         aclk : in std_logic;
         reset : in std_logic;
         a_in_data : in  std_logic_vector(63 downto 0);
         a_in_valid : in std_logic;
         a_in_ready : out std_logic;
         return_data : out  std_logic_vector(63 downto 0);
         return_valid : out std_logic;
         return_ready : in std_logic
   );
end entity;

architecture arch of test is
   component float_add is
      port ( 
         aclk : in std_logic;
         s_axis_a_tdata : in  std_logic_vector(63 downto 0);
         s_axis_b_tdata : in  std_logic_vector(63 downto 0);
         m_axis_result_tdata : out  std_logic_vector(63 downto 0);
         s_axis_a_tvalid : in std_logic;
         s_axis_b_tvalid : in std_logic;
         m_axis_result_tvalid : out std_logic;
         s_axis_a_tready : out std_logic;
         s_axis_b_tready : out std_logic;
         m_axis_result_tready : in std_logic
   );
   end component;

signal a_in_ready_1 : std_logic;
signal t0_data :  std_logic_vector(63 downto 0);
signal t0_valid : std_logic;
signal t0_ready : std_logic;
signal t0_data_1 :  std_logic_vector(63 downto 0);
signal t0_valid_1 : std_logic;
begin
   t0_data <= t0_data_1;
   t0_valid <= t0_valid_1;
   t0: float_add
      port map ( aclk => aclk,
                 m_axis_result_tdata => t0_data_1,
                 m_axis_result_tready => t0_ready,
                 m_axis_result_tvalid => t0_valid_1,
                 s_axis_a_tdata => a_in_data,
                 s_axis_a_tready => a_in_ready_1,
                 s_axis_a_tvalid => a_in_valid,
                 s_axis_b_tdata => to_float(2.000000),
                 s_axis_b_tvalid => '1');
   return_data <= t0_data;
   return_valid <= t0_valid;
   a_in_ready <= a_in_ready_1;
   t0_ready <= return_ready;
end architecture;


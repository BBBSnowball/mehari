
task compileTest(type: Exec) {
	ext.sourceFiles = fileTree(".").include("**/*.cpp").files
	ext.cppFlags = ["-g", "-I", gtestIncludeDir]
	ext.ldFlags  = ["-L", gtestLibDir]
	ext.libs     = ["-lgtest", "-lgmock", "-lpthread"]
	ext.cmdLine = ["g++", "-o", "test"] + cppFlags + ldFlags + sourceFiles + libs

	commandLine cmdLine

	inputs.property "commandLine", cmdLine
	inputs.files sourceFiles
	inputs.files fileTree(".").include("**/*.h")
	outputs.file "test"

	dependsOn ":tools:installGTest", ":tools:installGMock"
}

task test(type: Exec) {
	commandLine "./test"

	dependsOn compileTest
}

def makeRelative(x, relativeTo = ".") {
	if (x instanceof File)
		return relativePathTo(x, file(relativeTo))
	else
		return x
}

def escapeOneForMake(x) {
	//TODO
	return x
}

def escapeForMake(args) {
	if (args != null && args.class.isArray())
		args = args.toList()
	if (args instanceof Collection)
		return args.collect(this.&escapeOneForMake).join(" ")
	else
		return escapeOneForMake(args)
}

task createMakefile {
	doLast {
		def headers = fileTree(".").include("**/*.h").files.collect({ makeRelative(it) })

		file("Makefile").withWriter { w ->
			w.writeLine(".PHONY: all clean")
			w.writeLine("all: test")
			w.writeLine("")

			w.writeLine("%.o: %.cpp " + escapeForMake(headers))
			w.writeLine('\tg++ -c -o $@ $< ' + escapeForShell(compileTest.cppFlags))
			w.writeLine("")

			def objs = compileTest.inputs.files.files.collect({ makeRelative(it) })*.replaceFirst(/\.[^.]+$/, ".o")
			w.writeLine("test: " + escapeForMake(objs))
			w.writeLine("\tg++ -o test " + escapeForShell(compileTest.ldFlags) + ' $^ ' + escapeForShell(compileTest.libs))
			w.writeLine("")

			w.writeLine("clean:")
			w.writeLine("\trm -f test " + escapeForShell(objs))
			w.writeLine("")

			w.writeLine("run-test: test")
			w.writeLine("\t./test")
		}
	}

	dependsOn ":tools:installGTest", ":tools:installGMock"
}

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'net.saliman:gradle-properties-plugin:1.2.0'
		classpath 'org.hidetake:gradle-ssh-plugin:0.2.2'
	}

	repositories {
		maven {
			if (project.hasProperty('artifactory_contextUrl')) {
				url "$artifactory_contextUrl/plugins-release"

				if (project.hasProperty("artifactory_user")) {
					credentials {
						username = "${artifactory_user}"
						password = "${artifactory_password}"
					}
				}
			} else {
				url 'http://dl.bintray.com/jfrog/jfrog-jars'
			}
		}
	}
	dependencies {
		classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.0.9')
	}
}

allprojects {
	// use properties plugin -> local settings (e.g. Xilinx path and version) are in gradle-local.properties
	apply plugin: 'properties'
	apply plugin: 'ssh'
	apply plugin: HelpersPlugin

	task console {
		doLast {
			groovy.ui.Console.main([] as String[])
		}
	}

	remotes {
		board {
			host = project.hasProperty("board_ip") ? board_ip : null
			user = "root"
			useDefaultIdentityFile(it)
		}
	}
}

if (project.hasProperty("artifactory_contextUrl")) {
	allprojects {
		apply plugin: 'artifactory'
	}

	artifactory {
		contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
		/*publish {
			repository {
				repoKey = 'mehari-build'
				username = "${artifactory_user}"
				password = "${artifactory_password}"
				maven = true
				
			}
		}*/
		resolve {
			repository {
				repoKey = 'mehari-extern-sources'
				username = "${artifactory_user}"
				password = "${artifactory_password}"
				maven = true
				
			}
		}
	}
}

ext.havePrivateProject = file("private").isDirectory()
subprojects {
	ext.havePrivateProject = havePrivateProject
}

task checkSystemDependencies(type:Exec) {
	description "Make sure that the system has everything we need."

	commandLine "./ci-0020-check-deps.sh"

	environmentFromConfig()
}

subprojects {
	tasks.all { task ->
		task.mustRunAfter checkSystemDependencies
	}
}

task prepareTools {
	dependsOn "tools:install", "tools:test"

	mustRunAfter checkSystemDependencies
}

forAllNormalTestTasks() { task ->
	task.dependsOn prepareTools
}

task clean {
	dependsOn "reconos:clean", "llvm:clean"

	mustRunAfter checkSystemDependencies
}

task checkBeforeCompile {
	dependsOn "reconos:checkBeforeCompile"

	mustRunAfter checkSystemDependencies
}

task compile {
	dependsOn "reconos:compile", "llvm:compile"
	if (havePrivateProject)
		dependsOn "private:compile"

	mustRunAfter clean, checkBeforeCompile
	shouldRunAfter checkBeforeCompile
}

task prepareTest {
	dependsOn "reconos:prepareTest"

	mustRunAfter compile
}

task test {
	dependsOn "single-pendulum-vhdl:test"
	dependsOn "reconos:test"
	if (havePrivateProject)
		dependsOn "private:test"

	mustRunAfter prepareTest
}

task allCI {
	dependsOn checkSystemDependencies
	dependsOn checkBeforeCompile
	dependsOn clean
	dependsOn compile
	dependsOn prepareTest
	dependsOn test
}
defaultTasks "allCI"

if (hasProperty("sispm_outlet") && sispm_outlet) {
	task powercycleBoard(type: Exec) {
		description "Turn the board off and on again."

		commandLine "./ci-0910-powercycle-board.sh"

		environment "SISPM_OUTLET", sispm_outlet
	}

	forAllNormalTestTasks { task ->
		task.mustRunAfter powercycleBoard
	}

	allCI.dependsOn powercycleBoard

	prepareTest.shouldRunAfter powercycleBoard
}
